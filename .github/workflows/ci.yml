name: SafeVote CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build Docker Image & Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRESS_DB: safevote
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Wait for PostgreSQL
        run: |
          until PGPASSWORD=password psql -h localhost -U postgres -c '\l'; do
            >&2 echo "PostgreSQL is unavailable - sleeping"
            sleep 5
          done

      - name: Create Database
        run: |
          export PGPASSWORD=password
          psql -h localhost -U postgres -c "CREATE DATABASE safevote"

      - name: Run Migrations Tests
        run: npx knex migrate:latest

      - name: Seed Test Data
        run: npx knex seed:run

      - name: Run Integration Tests
        run: npm test

  build-and-push:
    name: Build Docker Image and Deploy to Kubernetes
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Registry
        uses:  docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image to registry
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/safevote-backend:latest

  deply-with-argocd:
    name: Deploy with Argo CD
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout Helm Chart
        uses: actions/checkout@v4

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: kubectl
        run: |
          kubectl get pods -A

      - name: Get ArgoCD Admin Password
        run: |
          PASSWORD=$(kubectl -n argocd secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ARGOCD_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Install Argo CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          kubectl -n argocd port-forward svc/argocd-server 8080:https &
          sleep 10


      - name: Configure ArgoCD Context
        run: |
          echo "url=${{ vars.ARGO_SERVER_URL }}"
          argocd login ${{ vars.ARGO_SERVER_URL }} \
            --username admin \
            --password ${{ env.ARGOCD_PASSWORD }} \
            --insecure

      - name: Sync Application in ArgoCD
        run: |
          argocd app set safevote-backend \
            --repo ${{ secrets.REPO_URL }}
            --path helm/safevote-backend-chart \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy automated

      - name: Deploy with Helm
        run: |
          hellm repo add bitnami https://charts.bitami.com/bitnami
          helm dependency update ./helm/safevote-backend
          helm upgrade --install safevote-backend ./helm/safevote-backend \
            --set image.repository=${{ vars.DOCKERHUB_USERNAME }}/safevote-backend \
            --set image.tag=latest

      - name: Archive Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: __tests__/results/
